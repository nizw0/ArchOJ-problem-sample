{
  "name": "Matrix Chain Multiplication",
  "description": "Suppose you have to evaluate an expression like A*B*C*D*E where A,B,C,D and E are matrices. Since matrix multiplication is associative, the order in which multiplications are performed is arbitrary. However, the number of elementary multiplications needed strongly depends on the evaluation order you choose.\nFor example, let A be a 50*10 matrix, B a 10*20 matrix and C a 20*5 matrix. There are two different strategies to compute A*B*C, namely (A*B)*C and A*(B*C).\nThe first one takes 15000 elementary multiplications, but the second one only 3500.\nYour job is to write a program that determines the number of elementary multiplications needed for a given evaluation strategy.\nInput\nInput consists of two parts: a list of matrices and a list of expressions. The first line of the input file contains one integer n (1 ≤ n ≤ 26), representing the number of matrices in the first part. The next n lines each contain one capital letter, specifying the name of the matrix, and two integers, specifying the number of rows and columns of the matrix.\nThe second part of the input file strictly adheres to the following syntax (given in EBNF):\nSecondPart = Line { Line } <EOF>\nLine = Expression <CR>\nExpression = Matrix | \"(\" Expression Expression \")\"\nMatrix = \"A\" | \"B\" | \"C\" | ... | \"X\" | \"Y\" | \"Z\"\nOutput\nFor each expression found in the second part of the input file, print one line containing the word ‘error’ if evaluation of the expression leads to an error due to non-matching matrices. Otherwise print one line containing the number of elementary multiplications needed to evaluate the expression in the way specified by the parentheses.",
  "fileUrl": "https://onlinejudge.org/external/4/442.pdf",
  "testcases": [
    {
      "input": "9\nA 50 10\nB 10 20\nC 20 5\nD 30 35\nE 35 15\nF 15 5\nG 5 10\nH 10 20\nI 20 25\nA\nB\nC\n(AA)\n(AB)\n(AC)\n(A(BC))\n((AB)C)\n(((((DE)F)G)H)I)\n(D(E(F(G(HI)))))\n((D(EF))((GH)I))",
      "output": "0\n0\n0\nerror\n10000\nerror\n3500\n15000\n40500\n47500\n15125",
      "isSample": true
    },
    {
      "input": "26\nA 50 10\nB 10 20\nC 20 5\nD 30 35\nE 35 15\nF 15 5\nG 5 10\nH 10 20\nI 20 25\nJ 25 60\nK 60 19\nL 19 12\nM 12 13\nN 13 20\nO 20 30\nP 30 28\nQ 28 29\nR 29 34\nS 34 25\nT 25 37\nU 37 21\nV 21 13\nW 13 30\nX 30 29\nY 29 38\nZ 38 28\nA\nB\nC\n(AA)\n(AB)\n(AC)\n(A(BC))\n((AB)C)\n(((((DE)F)G)H)I)\n(D(E(F(G(HI)))))\n((D(EF))((GH)I))\n(XY)\n(WX)\n(X(YZ))\n(((A(B(OD)))(((((EF)(((GH)I)J))K)(L(M(NO))))(PQ)))((R((ST)U))V))\n(A((B(OD))(E(((F((((GH)(IJ))((KL)M))N))(OP))((QR)S)))))\n((A(((BC)D)(((EF)((GH)I))(JK))))(L((MN)O)))\n(A((B((O((((DE)(FG))(HI))J))K))L))\n(A((B(C((DE)F)))(((GH)((IJ)(KL)))((M((N(OP))Q))R))))\n((((((A(B(CD)))E)(((FG)H)(IJ)))((KL)M))((NO)P))((Q(R(S(TU))))V))\n((GB)((OD)(A(FG))))\n((((A((BO)D))(((E(FG))H)I))(J(K(L((M(NO))P)))))((Q(RS))T))\nT\n(((A(BO))(D(E((FG)H))))((I(JK))((L(MN))(((OP)(Q(RS)))T))))\n(((A(((BO)D)E))(F((G(HI))J)))(((K(LM))((N(OP))Q))(R(ST))))\n((A(((BO)(D(EF)))((((G(HI))(JK))L)(MN))))(O(P((Q(RS))T))))\n((AB)((OD)E))\n(A((B((O((DE)F))((GH)I)))J))\n(((AB)(O(((DE)(F(GH)))I)))(((((JK)L)M)((NO)(PQ)))((R((ST)((U(VW))X)))Y)))",
      "output": "0\n0\n0\nerror\n10000\nerror\n3500\n15000\n40500\n47500\n15125\n33060\n11310\n55216\n359696\n216223\nerror\n149380\nerror\nerror\nerror\n368764\n0\n291300\n410852\n230090\n56500\n77000\n450469",
      "isSample": false
    },
    {
      "input": "26\nA 28 30\nB 30 17\nC 17 15\nD 15 25\nE 25 80\nF 80 4\nG 4 21\nH 21 36\nI 36 30\nJ 30 60\nK 60 19\nL 19 12\nM 12 13\nN 13 28\nO 28 69\nP 69 28\nQ 28 29\nR 29 34\nS 34 20\nT 20 37\nU 37 21\nV 21 13\nW 13 33\nX 33 29\nY 29 10\nZ 10 28\nD\nG\nC\n(AC)\n(A(BC))\n((AB)C)\n(((((DE)F)G)H)I)\n(D(E(F(G(HI)))))\n((A((F((CC)(EF)))G))H)\n((A(BC))(DE))\n((((A(BC))D)((E((F(GH))I))(JK)))((L(((MN)O)P))(QR)))\n(((((AB)C)D)((E(FG))((H(I(JK)))(L(MN)))))(((((OP)(QR))S)T)(UV)))\n((AB)(C((DE)F)))\n((((((AB)C)((DE)F))((GH)((I(((J(KL))M)N))((OP)Q))))(RS))(T(UV)))\n((AB)(C(DE)))\n((((((AB)C)(D((EF)G)))H)I)(J((K(LM))(NO))))\n((((A(BC))D)((((EF)(GH))((I(JK))(L((MN)O))))(PQ)))((R((ST)U))((VW)X)))\n(((A((BC)D))(E(F(GH))))(((IJ)K)(((LM)N)(O(PQ)))))\n(((A(BC))((D((DF)G))H))((I((JK)(LM)))(((NO)(PQ))(R(ST)))))\n((AB)((((C((DE)F))(G(((((H(IJ))((KL)M))N)((OP)Q))R)))(S(TU)))V))\n(A(B(C(DE))))\n((A((((((B(CD))E)F)G)(HI))J))(((KL)(MN))(OP)))\n(A((BC)D))\n(((((A(BC))(DE))F)G)((((HI)(J(KL)))(MN))((O(((PQ)R)S))((((TU)V)W)(XY)))))\n((((AB)C)(((D(EF))(GH))(IJ)))K)\n(((((AB)(((CD)E)((FG)(HI))))(J(((KL)M)N)))O)(((PQ)R)((((ST)U)V)W)))\n((AB)(CD))\n(((A(BC))D)((EF)G))",
      "output": "0\n0\n0\nerror\n20250\n21420\n63600\n106050\nerror\n83850\n374348\n387829\n52004\n318493\n102760\n378503\n521626\n443916\nerror\n379869\n158400\n423609\n39900\n444838\n190424\n703113\n32555\n55550",
      "isSample": false
    }
  ]
}
